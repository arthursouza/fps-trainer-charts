@page "/import"

@inject IFileReaderService fileReaderService;
@inject Blazored.LocalStorage.ILocalStorageService localStorage;

    <h1>Import Data</h1>
<h4>Select all your csv files in your Kovaak`s FPS Trainer folder</h4>
<h4>Typical path: [Steam folder]\steamapps\common\FPSAimTrainer\FPSAimTrainer\stats</h4>
<h4>After selecting all .csv files, click on Import Files</h4>

<input type="file" @ref=inputElement multiple />
<button @onclick=ReadFile>Import files</button>

<br />
<br />
<progress max="@max" value="@value" style="width: 50%;" />
<br />
<textarea style="max-width: 100%;" cols="50" rows="20">@Output</textarea>

@code 
{    
    public int BufferSize { get; set; } = 20480;
    public long max;
    public long value;
    ElementReference inputElement;
    List<Record> scores = new List<Record>();
    HashSet<string> challenges = new HashSet<string>();

    string Output { get; set; }

    public async Task ClearFile()
    {
        await fileReaderService.CreateReference(inputElement).ClearValue();
    }

    public async Task ReadFile()
    {
        Output += $"Reading files...";

        max = 0;
        value = 0;
        Output = string.Empty;
        this.StateHasChanged();
        var nl = Environment.NewLine;
        var files = (await fileReaderService.CreateReference(inputElement).EnumerateFilesAsync()).ToList();

        foreach (var file in files)
        {
            max += (await file.ReadFileInfoAsync()).Size;
        }

        foreach (var file in files)
        {
            var fileInfo = await file.ReadFileInfoAsync();

            if (!fileInfo.Name.Contains("Challenge"))
            {
                continue;
            }

            this.StateHasChanged();

            using (var fs = await file.OpenReadAsync())
            {
                var buffer = new byte[BufferSize];
                int count;
                var lastAnnounce = 0m;
                while ((count = await fs.ReadAsync(buffer, 0, buffer.Length)) != 0)
                {
                    value += count;
                    var progress = ((decimal)fs.Position * 100) / fs.Length;
                    if (progress > (lastAnnounce + 10))
                    {
                        //Output += $"Read {count} bytes ({progress:00}%). {fs.Position} / {fs.Length}{nl}";
                        await InvokeAsync(StateHasChanged);
                        await Task.Delay(1);
                        lastAnnounce = progress;
                    }
                }

                var lines = System.Text.Encoding.UTF8.GetString(buffer).Split(Environment.NewLine);

                var i = fileInfo.Name.IndexOf(" - Challenge");
                var date = fileInfo.Name.Substring(i, fileInfo.Name.Length - i);
                var challenge = lines.Where(l => l.StartsWith("Scenario:")).FirstOrDefault().Replace("Scenario:,", string.Empty).Trim();
                var scoreLine = lines.Where(l => l.StartsWith("Score:")).FirstOrDefault().Replace("Score:,", string.Empty);

                Console.WriteLine($"score - {scoreLine}");

                if (!challenges.Contains(challenge))
                {
                    challenges.Add(challenge);
                }

                var r = new Record()
                {
                    Challenge = challenge,
                    // - Challenge - 2020.05.05-22.49.56 Stats.csv
                    Date = DateTime.ParseExact(date.Replace(" - Challenge - ", string.Empty).Replace(" Stats.csv", string.Empty), "yyyy.MM.dd-HH.mm.ss", CultureInfo.InvariantCulture),
                    Score = double.Parse(scoreLine, CultureInfo.InvariantCulture)
                };

                if(r.Score == 0)
                    continue;

                scores.Add(r);
            }

            this.StateHasChanged();

            //await LoadChart();
            //await OnClick();
        }

        value=max;

        var contents = Newtonsoft.Json.JsonConvert.SerializeObject(scores, Newtonsoft.Json.Formatting.None);
        Console.WriteLine(contents);
        await localStorage.SetItemAsync("challengeScoresJson", contents);
        await localStorage.SetItemAsync("challengesJson", Newtonsoft.Json.JsonConvert.SerializeObject(challenges, Newtonsoft.Json.Formatting.None));

        Output += $"Done reading files{nl}";
    }
}
