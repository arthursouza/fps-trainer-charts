@page "/"
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS.LineChart
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.Util
@using ChartJs.Blazor.ChartJS.Common.Enums
@using ChartJs.Blazor.ChartJS.Common.Axes
@using ChartJs.Blazor.ChartJS.Common.Axes.Ticks
@using ChartJs.Blazor.ChartJS.Common.Handlers
@using ChartJs.Blazor.ChartJS.Common.Time;

@inject IFileReaderService fileReaderService;
@inject Blazored.LocalStorage.ILocalStorageService localStorage



    <BSContainer>
        <BSRow>
            <BSCol MD="4" MDOffset="4">
                <BSBasicInput InputType="InputType.Select" Value="string.Empty" @onchange="Refresh">
                    @foreach (var challenge in challenges)
                    {
                        if (challenge == currentChallenge)
                        {
                            <option value="@challenge" selected>@challenge.ToUpper()</option>
                        }
                        else
                        {
                            <option value="@challenge">@challenge.ToUpper()</option>
                        }
                    }
                </BSBasicInput>
            </BSCol>
        </BSRow>
        <br />
        <BSRow>
            <BSCol MD="4" MDOffset="4">
                <BSButton Color="Color.Primary" @onclick="Max">Max Score</BSButton>
                <BSButton Color="Color.Primary" @onclick="Avg">Average Score</BSButton>
            </BSCol>
        </BSRow>
        <br />
        <BSRow>
            <BSCol>
                <ChartJsLineChart @ref="lineChartJs" Config="@config" Width="800" Height="400" />
            </BSCol>
        </BSRow>
        <br />
        <BSRow>
            <BSCol MD="6" MDOffset="3" LG="4" LGOffset="4">
                <BSTable IsDark="true">
                    <thead>
                        <tr style="text-align: center;">
                            <th>Date</th>
                            <th>Score</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var score in currentScores)
                        {
                            <tr style="text-align: center;">
                                <td>@score.Date.ToString("yyyy/MM/dd HH:mm")</td>
                                <td>@((int)Math.Floor(score.Score))</td>
                            </tr>
                        }
                    </tbody>
                </BSTable>
            </BSCol>
        </BSRow>
    </BSContainer>    


    @code
{
        List<Record> scores = new List<Record>();
        HashSet<string> challenges = new HashSet<string>();
        string currentChallenge = string.Empty;
        private string _currentChallenge;

        public string CurrentChallenge
        {
            get { return _currentChallenge; }
            set
            {
                _currentChallenge = value;
            }
        }

        DataMode currentMode = DataMode.Avg;

        List<Record> currentScores
        {
            get
            {
                return scores?.Where(s => s.Challenge == currentChallenge).ToList();
            }
        }

        List<TimeTuple<int>> scoresAvg
        {
            get
            {
                return currentScores?.GroupBy(s => s.Date.Date).Select(s => new TimeTuple<int>(new Moment(s.Key), (int)Math.Floor(s.Average(v => v.Score)))).ToList();
            }
        }

        List<TimeTuple<int>> scoresMax
        {
            get
            {
                return currentScores?.GroupBy(s => s.Date.Date).Select(s => new TimeTuple<int>(new Moment(s.Key), (int)Math.Floor(s.Max(v => v.Score)))).ToList();
            }
        }

        private ChartJsLineChart lineChartJs;
        private LineConfig config;
        LineDataset<TimeTuple<int>> dataSet;

        private async Task Max()
        {
            if (scores != null)
            {
                await ReloadChart(scoresMax);
            }
        }

        private async Task Avg()
        {
            if (scores != null)
            {
                await ReloadChart(scoresAvg);
            }
        }

        private async Task Refresh(ChangeEventArgs e)
        {
            currentChallenge = (string)e.Value;

            if (currentMode == DataMode.Avg)
            {
                await Avg();
            }
            else
            {
                await Max();
            }

            this.StateHasChanged();
        }

        private async Task ReloadChart(List<TimeTuple<int>> data)
        {
            data = data.OrderBy(d => (DateTime)d.Time).ToList();

            Console.WriteLine("Loading charts...");

            Console.Write(Newtonsoft.Json.JsonConvert.SerializeObject(data));
            dataSet.RemoveRange(0, dataSet.Data.Count);
            dataSet.AddRange(data);

            config.Data.Datasets.Clear();
            config.Data.Datasets.Add(dataSet);

            await lineChartJs.Update();

        }

        protected override async Task OnInitializedAsync()
        {
            //scores = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Record>>(contents);
            await LoadChart();
        }

        private async Task LoadChart()
        {
            Console.WriteLine("Loading charts...");

            //if (scores != null && scores.Any())
            //{
            //    return;
            //}

            config = new LineConfig
            {
                Options = new LineOptions
                {
                    Responsive = true,
                    Title = new OptionsTitle
                    {
                        Display = false
                    },
                    Tooltips = new Tooltips
                    {
                        Mode = InteractionMode.Nearest,
                        Intersect = false
                    },
                    Scales = new Scales
                    {
                        xAxes = new List<CartesianAxis>
{
                            new TimeAxis
                            {
                                Distribution = TimeDistribution.Linear,
                                Ticks = new TimeTicks
                                {
                                    Source = TickSource.Data
                                },
                                Time = new TimeOptions
                                {
                                    Unit = TimeMeasurement.Day,
                                    Round = TimeMeasurement.Day,
                                    TooltipFormat = "DD.MM.YYYY",
                                    DisplayFormats = TimeDisplayFormats.DE_CH
                                },
                                ScaleLabel = new ScaleLabel
                                {
                                    LabelString = "Time"
                                }
                            }
                        }
                    },
                    Hover = new LineOptionsHover
                    {
                        Intersect = true,
                        Mode = InteractionMode.Y
                    }
                }
            };

            dataSet = new LineDataset<TimeTuple<int>>
            {
                BackgroundColor = ColorUtil.RandomColorString(),
                BorderColor = ColorUtil.RandomColorString(),
                Label = "Score",
                Fill = true,
                BorderWidth = 2,
                PointRadius = 3,
                PointBorderWidth = 5,
                SteppedLine = SteppedLine.False
            };

            Console.WriteLine("Checking localstorage...");
            if (await localStorage.ContainKeyAsync("challengeScoresJson"))
            {
                Console.WriteLine("Reading localstorage...");
                var contents = await localStorage.GetItemAsync<string>("challengeScoresJson");
                scores = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Record>>(contents);
                Console.WriteLine(contents);
            }


            if (await localStorage.ContainKeyAsync("challengesJson"))
                challenges = await localStorage.GetItemAsync<HashSet<string>>("challengesJson");

            Console.WriteLine($"challenges loaded {challenges.Count}");
            currentChallenge = challenges.FirstOrDefault();

            Console.WriteLine("Loading chart...");

            if (scores != null)
            {
                var data = scoresAvg.OrderBy(d => (DateTime)d.Time);
                Console.Write(Newtonsoft.Json.JsonConvert.SerializeObject(data));
                dataSet.AddRange(data);
            }

            config.Data.Datasets.Add(dataSet);
        }

        enum DataMode
        {
            Max,
            Avg
        }
    }
